import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import save_response, save_to_google_sheets, create_db

import os
from dotenv import load_dotenv


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env
load_dotenv()

# –í—Å—Ç–∞–≤—Ç–µ —Å–≤—ñ–π API —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()



# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
create_db()

def create_inline_keyboard(options, callback_prefix):
    """–°—Ç–≤–æ—Ä—é—î inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"{callback_prefix}:{option}")]
            for option in options
        ]
    )
    return keyboard

# üìå **–ü–∏—Ç–∞–Ω–Ω—è –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è**
questions = [
    ("full_name", "–í–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ?"),
    ("reason", "–ß–æ–º—É –≤–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –≤–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É —Å–∞–º–µ –∑–∞—Ä–∞–∑?"),
    ("obstacle", "–©–æ –¥–ª—è –≤–∞—Å —î –Ω–∞–π–±—ñ–ª—å—à–æ—é –ø–µ—Ä–µ—à–∫–æ–¥–æ—é —É –≤–∏–≤—á–µ–Ω–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó?"),
    ("future_use", "–Ø–∫ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É?"),
    ("interest", "–Ø–∫—ñ –∞—Å–ø–µ–∫—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ?", 
        create_inline_keyboard(["–ì—Ä–∞–º–∞—Ç–∏–∫–∞", "–†–æ–∑–º–æ–≤–Ω–∞ –º–æ–≤–∞", "–ë—ñ–∑–Ω–µ—Å-–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —ñ—Å–ø–∏—Ç—ñ–≤"], "interest")),
    ("format", "–Ø–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∞–º –±—ñ–ª—å—à–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?", 
        create_inline_keyboard(["–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è", "–ì—Ä—É–ø–æ–≤—ñ –∑–∞–Ω—è—Ç—Ç—è", "–ó–∞–Ω—è—Ç—Ç—è –≤ –ø–∞—Ä—ñ"], "format")),
    ("pace", "–Ø–∫–∏–π —Ç–µ–º–ø –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –≤–∞—Å –Ω–∞–π–±—ñ–ª—å—à –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π?", 
        create_inline_keyboard(["1 —Ä–∞–∑ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", "2 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", "3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", "–ú—ñ–∫—Ä–æ-–Ω–∞–≤—á–∞–Ω–Ω—è"], "pace")),
    ("hobbies", "–Ø–∫—ñ —É –≤–∞—Å —Ö–æ–±—ñ —Ç–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∏?"),
    ("daily_use", "–Ø–∫ —á–∞—Å—Ç–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É –≤ –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω–æ–º—É –∂–∏—Ç—Ç—ñ?"),
    ("favorites", "–Ø–∫—ñ –≤–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏, –∫–Ω–∏–≥–∏, –º—É–∑–∏–∫–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é?")
]

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

@dp.message(Command("start"))
async def start_survey(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start —ñ –∑–∞–ø—É—Å–∫–∞—î –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"""
    user_id = message.from_user.id
    user_states[user_id] = 0  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è.")
    await ask_question(user_id, message)

async def ask_question(user_id, message):
    """–ù–∞–¥—Å–∏–ª–∞—î –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ"""
    index = user_states[user_id]
    if index < len(questions):
        question = questions[index]
        column = question[0]
        text = question[1]
        keyboard = question[2] if len(question) > 2 else None  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —è–∫—â–æ –≤–æ–Ω–∞ —î

        if keyboard:
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer(text)
    else:
        await message.answer("–î—è–∫—É—é –∑–∞ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –ú–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.")
        save_to_google_sheets(user_id)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Google Sheets
        del user_states[user_id]  # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è

@dp.message()
async def handle_response(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è"""
    user_id = message.from_user.id
    if user_id in user_states:
        index = user_states[user_id]
        column = questions[index][0]  # –í–∏–∑–Ω–∞—á–∞—î–º–æ, –≤ —è–∫—É –∫–æ–ª–æ–Ω–∫—É –∑–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        save_response(user_id, column, message.text)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        user_states[user_id] += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
        await ask_question(user_id, message)  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è

@dp.callback_query()
async def handle_inline_response(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ inline-–∫–Ω–æ–ø–æ–∫"""
    user_id = callback_query.from_user.id
    data = callback_query.data.split(":")
    column, answer = data[0], data[1]  # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–ª–æ–Ω–∫—É —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    
    if user_id in user_states:
        index = user_states[user_id]
        expected_column = questions[index][0]

        if column == expected_column:  # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
            save_response(user_id, column, answer)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            user_states[user_id] += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
            await callback_query.message.edit_text(f"‚úÖ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {answer}")  # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await ask_question(user_id, callback_query.message)  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è

    await callback_query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
    